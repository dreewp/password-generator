{"version":3,"sources":["utils/generatePassword.js","utils/copyToClipboard.js","components/PasswordGenerator.js","App.js","index.js"],"names":["CharGenerator","uppercase","String","fromCharCode","Math","floor","random","lowercase","numbers","symbols","length","generatePassword","conditions","conditionsArr","Object","keys","filter","condition","password","idx","conditionsLeft","Set","size","randomCondition","delete","join","copyToClipboard","str","el","document","createElement","value","setAttribute","style","position","left","body","appendChild","select","execCommand","removeChild","PasswordGenerator","useState","setPassword","passwordText","useRef","setLength","setUppercase","setLowercase","setNumbers","setSymbols","useEffect","generateAndSetPassword","a","setTimeout","strengthClass","id","className","onSubmit","e","preventDefault","ref","disabled","icon","faClipboard","title","onClick","type","min","max","step","onChange","target","checked","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.49ec1850.chunk.js","sourcesContent":["const generateUppercase = () => {\n  return String.fromCharCode(Math.floor(Math.random() * 26) + 97);\n};\nconst generateLowercase = () => {\n  return String.fromCharCode(Math.floor(Math.random() * 26) + 65);\n};\nconst generateNumber = () => {\n  return String.fromCharCode(Math.floor(Math.random() * 10) + 48);\n};\nconst generateSymbol = () => {\n  const symbols = '!@#$%^&*(){}[]=<>/,.';\n  return symbols[Math.floor(Math.random() * symbols.length)];\n};\nconst CharGenerator = {\n  uppercase: generateUppercase,\n  lowercase: generateLowercase,\n  numbers: generateNumber,\n  symbols: generateSymbol,\n};\n\nconst generatePassword = (length, conditions) => {\n  const conditionsArr = Object.keys(conditions).filter(\n    (condition) => conditions[condition] === true\n  );\n\n  // while not all conditions are met and length is not full\n  const password = [];\n  let idx = 0;\n  const conditionsLeft = new Set(conditionsArr);\n  while (idx < length || conditionsLeft.size > 0) {\n    const randomCondition =\n      conditionsArr[Math.floor(Math.random() * conditionsArr.length)];\n    password[idx % length] = CharGenerator[randomCondition]();\n\n    idx++;\n    conditionsLeft.delete(randomCondition);\n  }\n\n  return password.join('');\n};\n\nexport default generatePassword;\n","const copyToClipboard = function (str) {\n  const el = document.createElement('textarea');\n  el.value = str;\n  el.setAttribute('readonly', '');\n  el.style.position = 'absolute';\n  el.style.left = '-9999px';\n  document.body.appendChild(el);\n  el.select();\n  document.execCommand('copy');\n  document.body.removeChild(el);\n};\n\nexport default copyToClipboard;\n","import React, { useState, useEffect, useRef } from 'react';\nimport '../styles/PasswordGenerator.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faClipboard } from '@fortawesome/free-solid-svg-icons';\nimport generatePassword from '../utils/generatePassword';\nimport copyToClipboard from '../utils/copyToClipboard';\n\nconst PasswordGenerator = () => {\n  const [password, setPassword] = useState('');\n  const passwordText = useRef();\n  const [length, setLength] = useState(14);\n\n  // check states\n  const [uppercase, setUppercase] = useState(true);\n  const [lowercase, setLowercase] = useState(true);\n  const [numbers, setNumbers] = useState(true);\n  const [symbols, setSymbols] = useState(true);\n\n  useEffect(() => {\n    generateAndSetPassword(length);\n  }, []);\n\n  const generateAndSetPassword = async (length, idx = 20) => {\n    if (idx < 0) return;\n    const password = generatePassword(length, {\n      uppercase,\n      lowercase,\n      numbers,\n      symbols,\n    });\n    await setTimeout(() => setPassword(password), 10);\n    generateAndSetPassword(length, idx - 1);\n  };\n  const onSubmit = (e) => {\n    e.preventDefault();\n    generateAndSetPassword(length);\n  };\n  const handleLengthChange = (e) => {\n    const length = e.target.value;\n    setLength(length);\n    generateAndSetPassword(length);\n  };\n\n  const getStrength = () => {\n    if (length <= 8) return 'weak';\n    else if (length <= 10) return 'medium';\n    else return 'strong';\n  };\n  const strengthClass = getStrength();\n\n  return (\n    <form\n      id=\"password-generator-form\"\n      className={strengthClass}\n      onSubmit={onSubmit}\n    >\n      <h1>Password Generator</h1>\n      <div id=\"password-container\">\n        <input\n          id=\"password\"\n          className={strengthClass}\n          value={password}\n          ref={passwordText}\n          disabled\n        />\n        <FontAwesomeIcon\n          id=\"clipboard-icon\"\n          icon={faClipboard}\n          size=\"lg\"\n          title=\"Copy to Clipboard!\"\n          onClick={() => copyToClipboard(password)}\n        />\n      </div>\n      <span id=\"strength\">Strength ({strengthClass})</span>\n      <br />\n      <label>Length ({length})</label>\n      <input\n        type=\"range\"\n        min={1}\n        max={40}\n        step={1}\n        value={length}\n        onChange={handleLengthChange}\n      />\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={uppercase}\n          onChange={(e) => setUppercase(e.target.checked)}\n        />\n        Include uppercase letters\n      </label>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={lowercase}\n          onChange={(e) => setLowercase(e.target.checked)}\n        />\n        Include lowercase letters\n      </label>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={numbers}\n          onChange={(e) => setNumbers(e.target.checked)}\n        />\n        Include numbers\n      </label>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={symbols}\n          onChange={(e) => setSymbols(e.target.checked)}\n        />\n        Include symbols (ex. !@#$)\n      </label>\n      <br />\n      <button id=\"generate-btn\" type=\"submit\">\n        Generate\n      </button>\n    </form>\n  );\n};\n\nexport default PasswordGenerator;\n","import React from 'react';\nimport './App.scss';\nimport PasswordGenerator from './components/PasswordGenerator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PasswordGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}